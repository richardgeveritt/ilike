// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/ilike.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// do_importance_sampler
void do_importance_sampler(const List& model, const List& parameters, size_t number_of_importance_points, bool parallel_in, size_t grain_size_in, const std::string& results_name_in, size_t seed);
RcppExport SEXP _ilike_do_importance_sampler(SEXP modelSEXP, SEXP parametersSEXP, SEXP number_of_importance_pointsSEXP, SEXP parallel_inSEXP, SEXP grain_size_inSEXP, SEXP results_name_inSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const List& >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< size_t >::type number_of_importance_points(number_of_importance_pointsSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel_in(parallel_inSEXP);
    Rcpp::traits::input_parameter< size_t >::type grain_size_in(grain_size_inSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type results_name_in(results_name_inSEXP);
    Rcpp::traits::input_parameter< size_t >::type seed(seedSEXP);
    do_importance_sampler(model, parameters, number_of_importance_points, parallel_in, grain_size_in, results_name_in, seed);
    return R_NilValue;
END_RCPP
}
// a_test
double a_test(const List& model);
RcppExport SEXP _ilike_a_test(SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(a_test(model));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ilike_do_importance_sampler", (DL_FUNC) &_ilike_do_importance_sampler, 7},
    {"_ilike_a_test", (DL_FUNC) &_ilike_a_test, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_ilike(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
