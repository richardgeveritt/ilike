double prior_mean = 1.0;
double prior_sd = 1.0;
double obs_sd = 1.0;

/***data***/
Data set_data() {
  arma::colvec x(1);
  x(0) = 1.0;
  return Data("x", x);
}

/***evaluate_log_prior***/
double evaluate_log_prior(const Parameters &params) {
  return dnorm(params["theta"][0], prior_mean, prior_sd);
}

/***simulate_prior***/
Parameters simulate_prior(RandomNumberGenerator &rng) {
  return Parameters("theta", rnorm(rng, prior_mean, prior_sd));
}

/***evaluate_gradient_log_prior***/
arma::mat prior_gradient_eval(const std::string &variable,
                              const Parameters &parameters) {
  if (variable == "theta") {
    // Gradient of the prior w.r.t. theta
    arma::mat grad(1, 1);
    grad(0, 0) = -(parameters["theta"][0] - prior_mean) / (prior_sd * prior_sd);
    return grad;
  } else {
    Rcpp::stop("Unknown variable in prior gradient.");
  }
}

/***evaluate_log_likelihood***/
double evaluate_likelihood(const Parameters &params, const Data &data) {
  return dnorm(data["x"][0], params["theta"][0], obs_sd);
}

/***evaluate_gradient_log_likelihood***/
arma::mat likelihood_gradient_eval(const std::string &variable,
                                   const Parameters &parameters,
                                   const Data &data) {
  if (variable == "theta") {
    arma::colvec y = data["y"];
    arma::mat grad(1, 1);
    grad(0, 0) = arma::sum((y - parameters["theta"][0]) / (obs_sd * obs_sd));
    return grad;
  } else {
    Rcpp::stop("Unknown variable in likelihood gradient.");
  }
}
